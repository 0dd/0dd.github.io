<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[A C# Project to detect facial landmarks by using Intel RealSense SR300]]></title>
    <url>%2F2017%2F11%2F22%2FC-RealSense-Project-Facial-Landmark%2F</url>
    <content type="text"><![CDATA[1 Deploy the running environment1.1 Install the driver for Intel RealSense SR300The Intel RealSense has already been stopped supporting, however there are still many existing material could be used. Before we start our project, the first thing we want to do is to download the driver of SR300 from their website. You will want to install it like below. For one thing that you need to attention is that please make sure the RealSense has already connected to your computer. If there appears any connection problem, you may want to restart your computer to make sure it works. 1.2 Install the SDK for Intel RealSense SR300After installing the driver for SR300, you will want to install the SDK for further work. From their website we can see that there exist both R3 and R2 SDK, please download the full SDK R2. Because the Face Tracking for R3 on their web site is in-completed also there exists many problems. After the preceding procedure please reboot your computer to apply all changes. 1.3 Run the Sample programAfter installing the SDK, samples folder will be automatically generated on your desktop folder. Please open the sample browser and tried some samples to make sure your computer support the SR300 2 Create Your Own C# Project2.1 Create a WPF HelloWorld projectIn this time, we recommend you to use Visual Studio 2015 to create your own project, since the SDK and the reference offered by Intel was completed before Visual Studio 2017. First you will want to create a new project by click the new Project. In this time, we want to create a WPF project, the selection you want to click The project structure looks like below Before we run our HelloWorld Program, we need to configure our target CPU, since the RealSense are suggested to work with 6 generation CPU, we need to change the target CPU to X64 by doing the following steps Then you could run your first HelloWorld Program by clicking the start button. 2.2 Add the essential references for from SDKThen we need to add the references from RealSense SDK so that the project we created could work with RealSense. Please right click the references at the right panel of Visual Studio, Then add new references. You will want to browse to you local folder, find the “libpxcclr.dll” in the path “C:\Program Files (x86)\Intel\RSSDK\bin\x64” and add this dll file. After these, you need to close your Visual Studio and access “C:\Program Files (x86)\Intel\RSSDK\bin\x64” then copy the “libpxccpp2c.dll” file to your project folder “C:\Users\UserName\Documents\Visual Studio 2015\Projects\HelloWorld\HelloWorld\bin\Debug” and “C:\Users\UserName\Documents\Visual Studio 2015\Projects\HelloWorld\HelloWorld\bin\x64\Debug” 2.3 Capture Your Facial Landmark2.3.1 Create a button Find the button element from toolbox in left Panel. Simply drag it in to your main window View ​ Your XAML code of the button may look like below 123&lt;Grid&gt; &lt;Button x:Name="button" Content="Button" HorizontalAlignment="Left" Margin="153,97,0,0" VerticalAlignment="Top" Width="75"/&gt; &lt;/Grid&gt; Double click the button in MainWindow it will automatically generate the C# code for you. Your C# code will look like below. 12345678910111213141516171819202122232425262728293031323334using System;using System.Collections.Generic;using System.Linq;using System.Text;using System.Threading.Tasks;using System.Windows;using System.Windows.Controls;using System.Windows.Data;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Imaging;using System.Windows.Navigation;using System.Windows.Shapes;namespace HelloWorld&#123; /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow : Window &#123; public MainWindow() &#123; InitializeComponent(); &#125; private void button_Click(object sender, RoutedEventArgs e) &#123; &#125; &#125;&#125; 2.3.2 Initialize your RealsenseAdd the following code before the MainWindow() function 12345678910private PXCMSenseManager senseManager;private PXCMFaceModule faceModule;private PXCMFaceConfiguration faceConfig;private PXCMFaceData faceData; public MainWindow() &#123; ...... &#125; Then add the following code inside your MainWindow() function 1234567891011121314151617public MainWindow() &#123; InitializeComponent(); senseManager = PXCMSenseManager.CreateInstance(); senseManager.EnableFace(); senseManager.Init(); faceModule = senseManager.QueryFace(); faceConfig = faceModule.CreateActiveConfiguration(); faceConfig.landmarks.maxTrackedFaces = 2; faceConfig.landmarks.isEnabled = true; faceConfig.detection.maxTrackedFaces = 2; faceConfig.detection.isEnabled = true; faceConfig.EnableAllAlerts(); faceConfig.ApplyChanges(); &#125; Run your project. You will see the green light in your RealSense is on, which means your codes work. 2.3.3 Create a thread to capture facial dataAdd these three lines on top of your C# file. 123using System.Threading;using System.Threading.Tasks;using System.IO; Then create a ProcessingThread() function to capture the facial data 1234private void ProcessingThread()&#123; &#125; Add the following while loop to refresh the data from the camera 1234567891011 private void ProcessingThread() &#123; // Start AcquireFrame/ReleaseFrame loop while (senseManager.AcquireFrame(true) &gt;= pxcmStatus.PXCM_STATUS_NO_ERROR) &#123;// Release the frame if (faceData != null) faceData.Dispose(); senseManager.ReleaseFrame(); &#125; &#125; Add the following code inside while loop to capture facial module 12345678910111213 while (senseManager.AcquireFrame(true) &gt;= pxcmStatus.PXCM_STATUS_NO_ERROR) &#123; faceModule = senseManager.QueryFace(); if (faceModule != null) &#123; // Retrieve the most recent processed data faceData = faceModule.CreateOutput(); faceData.Update(); &#125;// Release the frame if (faceData != null) faceData.Dispose(); senseManager.ReleaseFrame(); &#125; Then add the following code inside the while loop to traverse all the faces in faceData, and create the instance of landmark 1234567891011121314151617181920212223 while (senseManager.AcquireFrame(true) &gt;= pxcmStatus.PXCM_STATUS_NO_ERROR)&#123; faceModule = senseManager.QueryFace(); if (faceModule != null) &#123; // Retrieve the most recent processed data faceData = faceModule.CreateOutput(); faceData.Update(); &#125; if (faceData != null) &#123; Int32 nfaces = faceData.QueryNumberOfDetectedFaces(); for (Int32 i = 0; i &lt; nfaces; i++) &#123; PXCMFaceData.Face face = faceData.QueryFaceByIndex(i); PXCMFaceData.LandmarksData landmarkData = face.QueryLandmarks(); &#125; &#125; // Release the frame if (faceData != null) faceData.Dispose(); senseManager.ReleaseFrame();&#125; Add the following codes inside your face loop to traverse all the landmark 12345678910111213141516for (Int32 i = 0; i &lt; nfaces; i++) &#123; PXCMFaceData.Face face = faceData.QueryFaceByIndex(i); PXCMFaceData.LandmarksData landmarkData = face.QueryLandmarks(); if (landmarkData != null) &#123; PXCMFaceData.LandmarkPoint[] landmakrPoints; landmarkData.QueryPoints(out landmakrPoints); for (int j = 0; j &lt; landmakrPoints.Length; j++) &#123; &#125; &#125; &#125; Add the following codes inside the landmark loop to export the coordinate 12345678910for (int j = 0; j &lt; landmakrPoints.Length; j++)&#123; using (StreamWriter sw = File.AppendText(filePath)) &#123; sw.WriteLine(i + "," + (j + 1) + "," + landmakrPoints[j].image.x.ToString() + "," + landmakrPoints[j].image.y.ToString()); &#125;&#125; You will find that there exist an error on the filePath, then we will construct it. 2.3.4 Construct the FilePathIn this project, the filePath is consist of the folder path that your want your data stored in the filename the extension In this time, we will store our data as a Comma separated values file on our desktop and the extension should be “.csv”. The file name will be “landMark” going with the created time. We first create these two strings to store the time and the path, and add these two lines before the MainWindow() function. 12private string time = DateTime.Now.ToString("M_d_hh_mm_ss"); private string filePath = @"C:\Users\csplayground\Desktop\landMark"; Then we add these two lines in MainWindow() to construct the final filePath 1234567public MainWindow() &#123; InitializeComponent(); filePath += time; filePath += ".csv"; ...... &#125; After that, add these lines at the beginning of the ProcessingThread() function to set the table header of data 12345678910private void ProcessingThread() &#123; using (StreamWriter sw = File.AppendText(filePath)) &#123; sw.WriteLine("User ID" + "," + "landmarkIndex" + "," + "X" + "," + "Y"); &#125; ...... &#125; 2.3.5 Invoke the ThreadWe then invoke the thread in the button_click() by adding these two lines 12345private void button_Click(object sender, RoutedEventArgs e)&#123; processingThread = new Thread(new ThreadStart(ProcessingThread)); processingThread.Start();&#125; 3 Run your Program and see the Exported dataHere is the full code of the C# file, check if there is any missing and run it. Click the button and there will generate the exported data on your desktop. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137using System;using System.Collections.Generic;using System.IO;using System.Linq;using System.Text;using System.Threading;using System.Threading.Tasks;using System.Windows;using System.Windows.Controls;using System.Windows.Data;using System.Windows.Documents;using System.Windows.Input;using System.Windows.Media;using System.Windows.Media.Imaging;using System.Windows.Navigation;using System.Windows.Shapes;namespace RsNoUIWPF&#123; /// &lt;summary&gt; /// Interaction logic for MainWindow.xaml /// &lt;/summary&gt; public partial class MainWindow : Window &#123; private Thread processingThread; private PXCMSenseManager senseManager; private PXCMFaceModule faceModule; private PXCMFaceConfiguration faceConfig; private PXCMFaceData faceData; private string time = DateTime.Now.ToString("M_d_hh_mm_ss"); private string filePath = @"C:\Users\csplayground\Desktop\landMark"; DateTime startTime; public MainWindow() &#123; InitializeComponent(); filePath += time; filePath += ".csv"; startTime = DateTime.Now; // Instantiate and initialize the SenseManager senseManager = PXCMSenseManager.CreateInstance(); senseManager.EnableFace(); senseManager.Init(); faceModule = senseManager.QueryFace(); faceConfig = faceModule.CreateActiveConfiguration(); faceConfig.landmarks.maxTrackedFaces = 4; faceConfig.landmarks.isEnabled = true; faceConfig.detection.maxTrackedFaces = 4; faceConfig.detection.isEnabled = true; faceConfig.EnableAllAlerts(); faceConfig.ApplyChanges(); &#125; private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e) &#123; processingThread.Abort(); if (faceData != null) faceData.Dispose(); faceConfig.Dispose(); senseManager.Dispose(); &#125; private void ProcessingThread() &#123; using (StreamWriter sw = File.AppendText(filePath)) &#123; sw.WriteLine("User ID" + "," + "landmarkIndex" + "," + "X" + "," + "Y"); &#125; // Start AcquireFrame/ReleaseFrame loop while (senseManager.AcquireFrame(true) &gt;= pxcmStatus.PXCM_STATUS_NO_ERROR) &#123; // Retrieve face data faceModule = senseManager.QueryFace(); if (faceModule != null) &#123; // Retrieve the most recent processed data faceData = faceModule.CreateOutput(); faceData.Update(); &#125; if (faceData != null) &#123; Int32 nfaces = faceData.QueryNumberOfDetectedFaces(); for (Int32 i = 0; i &lt; nfaces; i++) &#123; PXCMFaceData.Face face = faceData.QueryFaceByIndex(i); PXCMFaceData.LandmarksData landmarkData = face.QueryLandmarks(); if (landmarkData != null) &#123; PXCMFaceData.LandmarkPoint[] landmakrPoints; landmarkData.QueryPoints(out landmakrPoints); for (int j = 0; j &lt; landmakrPoints.Length; j++) &#123; using (StreamWriter sw = File.AppendText(filePath)) &#123; sw.WriteLine(i + "," + (j + 1) + "," + landmakrPoints[j].image.x.ToString() + "," + landmakrPoints[j].image.y.ToString()); &#125; &#125; using (StreamWriter sw = File.AppendText(filePath)) &#123; sw.WriteLine("--------------------------"); &#125; &#125; &#125; &#125; // Release the frame if (faceData != null) faceData.Dispose(); senseManager.ReleaseFrame(); &#125; &#125; private void button_Click(object sender, RoutedEventArgs e) &#123; processingThread = new Thread(new ThreadStart(ProcessingThread)); processingThread.Start(); &#125; &#125;&#125;]]></content>
      <tags>
        <tag>C#</tag>
        <tag>Intel</tag>
        <tag>RealSense</tag>
        <tag>WPF</tag>
        <tag>landmark</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[First exploration on C# for Intel RealSense]]></title>
    <url>%2F2017%2F11%2F19%2FFirst-exploration-on-C-for-Intel-RealSense-Camera%2F</url>
    <content type="text"><![CDATA[Deploy the running environmentFor the first thing I would like to mention is that the SDK for Intel RealSense SR300 has not been supported any more. However the previous SDK could still be found on their Website. Since my goal is to use the RealSense to detect the user’s face. I first tried the SDK R3 by downloading the individual component. After installing the Face Tracking component a SDK samples folder will be automatically generated on the desktop folder. Create a Hello World AppIn this part I first create a UWP blank App by using Visual Studio 2015. When I tried to add the essential references to this blank App I find out that SDK for Face Module is incomplete. RealSense essential reference could be added RealSense face module reference could not be added because of lacking of winmd file This is my first trial on RealSense R3 SDK for UWP App. I will follow up it these days.]]></content>
      <tags>
        <tag>C#</tag>
        <tag>UWP</tag>
        <tag>Intel</tag>
        <tag>RealSense</tag>
      </tags>
  </entry>
</search>
